{"version":3,"sources":["history.js"],"names":["Zemit","app","factory","$diff","$session","$hook","$injector","$timeout","$database","$device","dbHistory","on","console","log","response","add","changes","get","load","dump","set","isStandalone","save","position","canUndo","canRedo","transaction","scope","parentCallback","originalScope","angular","copy","callback","newScope","diff","getDifferences","timestamp","Date","splice","clearAfter","run","Function","undo","applyDifferences","$zm","widget","updateWidgetStates","redo","length","index","forEach","change","push","data","$segment","segment","content","flush"],"mappings":"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","file":"history.js","sourcesContent":["/**\n * Zemit History Manager\n * @author: <contact@dannycoulombe.com>\n * \n * Keeps track of every changes. Undo/redo capabilities\n */\n(function() {\n\tZemit.app.factory('$history', ['$diff', '$session', '$hook', '$injector', '$timeout', '$database', '$device', function($diff, $session, $hook, $injector, $timeout, $database, $device) {\n\t    \n\t    let dbHistory = new $database('history');\n\t    dbHistory.on('change', response => {\n\t    \tconsole.log('DBCHANGE', response);\n\t    });\n\t    \n\t    $hook.add('onSegmentLoad', function() {\n\t    \tvar changes = $session.get('history');\n\t\t\tfactory.load(changes);\n\t    });\n\t    \n\t    $hook.add('onBeforeUnload', function() {\n\t    \tvar changes = factory.dump();\n\t    \t$session.set('history', changes);\n\t    });\n\t    \n\t    if($device.isStandalone()) {\n\t\t\t$hook.add(['onNewHistory', 'onUndoHistory', 'onRedoHistory'], function() {\n\t\t\t\t$session.save();\n\t\t\t});\n\t\t}\n\t    \n\t\tvar factory = {\n\t\t\t\n\t\t\tposition: 0,\n\t\t\tcanUndo: false,\n\t\t\tcanRedo: false,\n\t\t\tchanges: [],\n\t\t\t\n\t\t\t/**\n\t\t\t * Log a new change\n\t\t\t */\n\t\t\ttransaction: function(scope, parentCallback) {\n\t\t\t\t\n\t\t\t\tvar originalScope = angular.copy(scope);\n\t\t\t\tvar callback = function() {\n\t\t\t\t\t\n\t\t\t\t\t// Get difference and prepare new log object\n\t\t\t\t\tvar newScope = angular.copy(scope);\n\t\t\t\t\tvar diff = $diff.getDifferences(originalScope, newScope);\n\t\t\t\t\t\n\t\t\t\t\tif(!diff) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar log = {\n\t\t\t\t\t\tdiff: diff,\n\t\t\t\t\t\tscope: scope,\n\t\t\t\t\t\ttimestamp: new Date()\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// Insert log\n\t\t\t\t\tfactory.changes.splice(factory.position, 0, log);\n\t\t\t\t\t\n\t\t\t\t\t// Remove all changes after the latest inserted log\n\t\t\t\t\tfactory.clearAfter(factory.position);\n\t\t\t\t\t\n\t\t\t\t\tfactory.position++;\n\t\t\t\t\tfactory.canUndo = true;\n\t\t\t\t\t\n\t\t\t\t\t$hook.run('onNewHistory');\n\t\t\t\t\t\n\t\t\t\t\tconsole.log('HISTORY', diff);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tif(parentCallback instanceof Function) {\n\t\t\t\t\tparentCallback();\n\t\t\t\t\treturn callback();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn callback;\n\t\t\t\t}\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Undo latest change\n\t\t\t */\n\t\t\tundo: function() {\n\t\t\t\t\n\t\t\t\tif(!this.canUndo) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Retrieve log and apply changes\n\t\t\t\tvar log = this.changes[this.position - 1];\n\t\t\t\t$diff.applyDifferences(log.scope, log.diff, true);\n\t\t\t\tthis.position--;\n\t\t\t\t\n\t\t\t\tif(this.position === 0) {\n\t\t\t\t\tthis.canUndo = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.canRedo = true;\n\t\t\t\t\n\t\t\t\t$timeout(function() {\n\t\t\t\t\tvar $zm = $injector.get('$zm');\n\t\t\t\t\t$zm.widget.updateWidgetStates();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t$hook.run('onUndoHistory');\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Redo change\n\t\t\t */\n\t\t\tredo: function() {\n\t\t\t\t\n\t\t\t\tif(!this.canRedo) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Retrieve log and apply changes\n\t\t\t\tvar log = this.changes[this.position];\n\t\t\t\t$diff.applyDifferences(log.scope, log.diff);\n\t\t\t\tthis.position++;\n\t\t\t\t\n\t\t\t\tif(this.position === this.changes.length) {\n\t\t\t\t\tthis.canRedo = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.canUndo = true;\n\t\t\t\t\n\t\t\t\t$timeout(function() {\n\t\t\t\t\tvar $zm = $injector.get('$zm');\n\t\t\t\t\t$zm.widget.updateWidgetStates();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t$hook.run('onRedoHistory');\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Remove all changes after given index\n\t\t\t */\n\t\t\tclearAfter: function(index) {\n\t\t\t\t\n\t\t\t\twhile((factory.changes.length - 1) > index) {\n\t\t\t\t\tfactory.changes.splice(factory.changes.length - 1, 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(factory.position > index) {\n\t\t\t\t\tfactory.position = index;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfactory.canRedo = false;\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Get all changes in memory changes\n\t\t\t */\n\t\t\tdump: function() {\n\t\t\t\t\n\t\t\t\tvar changes = [];\n\t\t\t\tangular.forEach(factory.changes, function(change) {\n\t\t\t\t\t\n\t\t\t\t\tchanges.push({\n\t\t\t\t\t\tdiff: change.diff,\n\t\t\t\t\t\ttimestamp: change.timestamp\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\tchanges: changes,\n\t\t\t\t\tposition: this.position\n\t\t\t\t};\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Load all changes from memory\n\t\t\t */\n\t\t\tload: function(data) {\n\t\t\t\t\n\t\t\t\tvar $zm = $injector.get('$zm');\n\t\t\t\tvar $segment = $injector.get('$segment');\n\t\t\t\tvar scope = $segment.segment.data.content;\n\t\t\t\tvar changes = [];\n\t\t\t\tangular.forEach(data.changes, function(change) {\n\t\t\t\t\t\n\t\t\t\t\tchanges.push({\n\t\t\t\t\t\tdiff: change.diff,\n\t\t\t\t\t\tscope: scope,\n\t\t\t\t\t\ttimestamp: change.timestamp\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tthis.changes = changes;\n\t\t\t\tthis.position = data.position || 0;\n\t\t\t\t\n\t\t\t\tthis.canRedo = this.position < this.changes.length;\n\t\t\t\tthis.canUndo = this.position > 0;\n\t\t\t},\n\t\t\t\n\t\t\tflush: function() {\n\t\t\t\t\n\t\t\t\tthis.changes = [];\n\t\t\t\tthis.position = 0;\n\t\t\t\tthis.canUndo = false;\n\t\t\t\tthis.canRedo = false;\n\t\t\t}\n\t\t};\n\t\t\n\t\treturn factory;\n\t}]);\n})();"]}