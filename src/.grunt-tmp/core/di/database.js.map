{"version":3,"sources":["database.js"],"names":["Zemit","app","factory","$util","wrapper","name","db","init","PouchDB","on","eventName","callback","syncWith","sync","get","id","getAll","options","include_docs","allDocs","then","response","rows","forEach","row","index","eval","camelize","insert","model","post","getData","update","parsedModel","Object","assign","_id","getKey","_rev","rev","put","delete","remove","doc","find","query","truncate","destroy","import","json","docs","export","attachments","JSON","stringify"],"mappings":"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","file":"database.js","sourcesContent":["/**\n * Zemit Configs\n * @author: <contact@dannycoulombe.com>\n * \n * Get and set configurations\n */\n(function() {\n\tZemit.app.factory('$database', ['$util', function($util) {\n\t\n\t\tlet wrapper = function(name) {\n\t\t\tlet factory = {\n\t\t\t\t\n\t\t\t\tdb: null,\n\t\t\t\tname: null,\n\t\t\t\t\n\t\t\t\tinit: function() {\n\t\t\t\t\t\n\t\t\t\t\tthis.db = new PouchDB(name);\n\t\t\t\t\tthis.name = name;\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\ton: function(eventName, callback = () => {}) {\n\t\t\t\t\t\n\t\t\t\t\tthis.db.on(eventName, callback);\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tsyncWith: function(db) {\n\t\t\t\t\t\n\t\t\t\t\tthis.db.sync(db);\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tget: function(id) {\n\t\t\t\t\t\n\t\t\t\t\treturn this.db.get(id);\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tgetAll: function(options = {\n\t\t\t\t\tinclude_docs: true\n\t\t\t\t}) {\n\t\t\t\t\t\n\t\t\t\t\treturn this.db.allDocs(options).then(response => {\n\t\t\t\t\t\tresponse.rows.forEach((row, index) => {\n\t\t\t\t\t\t\tresponse.rows[index] = eval('new Zm' + $util.camelize(factory.name, true) + '(\"' + row.id + '\", row.doc)');\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn response;\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tinsert: function(model) {\n\t\t\t\t\t\n\t\t\t\t\treturn this.db.post(model.getData());\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tupdate: function(model) {\n\t\t\t\t\t\n\t\t\t\t\tlet parsedModel = Object.assign({\n\t\t\t\t\t\t_id: model.getKey(),\n\t\t\t\t\t\t_rev: model.getData().rev\n\t\t\t\t\t}, model.getData());\n\t\t\t\t\tdelete parsedModel.rev;\n\t\t\t\t\t\n\t\t\t\t\tthis.db.put(parsedModel);\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tdelete: function(id) {\n\t\t\t\t\t\n\t\t\t\t\tthis.db.get(id).then(doc => {\n\t\t\t\t\t\tfactory.db.remove(doc);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tfind: function(query) {\n\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\ttruncate: function() {\n\t\t\t\t\t\n\t\t\t\t\tthis.db.destroy().then(() => {\n\t\t\t\t\t\tfactory.init();\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\timport: function(json) {\n\t\t\t\t\t\n\t\t\t\t\tjson.docs.forEach(doc => {\n\t\t\t\t\t\tfactory.update(doc._id, doc);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\texport: function() {\n\t\t\t\t\t\n\t\t\t\t\treturn this.getAll({\n\t\t\t\t\t\tinclude_docs: true,\n\t\t\t\t\t\tattachments: true\n\t\t\t\t\t}).then(JSON.stringify);\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tdestroy: function() {\n\t\t\t\t\t\n\t\t\t\t\treturn this.db.destroy();\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tfactory.init();\n\t\t\t\n\t\t\treturn factory;\n\t\t};\n\t\t\n\t\treturn wrapper;\n\t}]);\n})();"]}